const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const readline = require('readline');

class PermissionFixer {
    constructor() {
        this.projectPath = __dirname;
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    async run() {
        console.log('üõ†Ô∏è  GMV SISTEMA - CORRE√á√ÉO DE PERMISS√ïES');
        console.log('==========================================\n');
        
        console.log('‚ùå Detectado erro de permiss√£o (EPERM)');
        console.log('Este √© um problema comum no Windows relacionado a:');
        console.log('‚Ä¢ Antiv√≠rus bloqueando arquivos .exe');
        console.log('‚Ä¢ Falta de permiss√µes administrativas');
        console.log('‚Ä¢ Processos usando os arquivos\n');

        try {
            await this.diagnoseIssue();
            await this.showSolutions();
            await this.attemptFix();
        } catch (error) {
            console.error('‚ùå Erro durante corre√ß√£o:', error.message);
        } finally {
            this.rl.close();
        }
    }

    async diagnoseIssue() {
        console.log('üîç Diagnosticando problema...\n');
        
        const nodeModulesPath = path.join(this.projectPath, 'node_modules');
        if (fs.existsSync(nodeModulesPath)) {
            console.log('‚úÖ Pasta node_modules encontrada');
            
            const electronPath = path.join(nodeModulesPath, 'electron');
            if (fs.existsSync(electronPath)) {
                console.log('‚ö†Ô∏è  Electron parcialmente instalado');
            } else {
                console.log('‚ùå Electron n√£o instalado');
            }
        } else {
            console.log('‚ùå Pasta node_modules n√£o encontrada');
        }

        try {
            const processes = await this.runCommand('tasklist /FI "IMAGENAME eq electron.exe"');
            if (processes.includes('electron.exe')) {
                console.log('‚ö†Ô∏è  Processos Electron em execu√ß√£o detectados');
            } else {
                console.log('‚úÖ Nenhum processo Electron em execu√ß√£o');
            }
        } catch (error) {
            console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel verificar processos');
        }

        try {
            const testFile = path.join(this.projectPath, 'test-permissions.txt');
            fs.writeFileSync(testFile, 'test');
            fs.unlinkSync(testFile);
            console.log('‚úÖ Permiss√µes de escrita OK');
        } catch (error) {
            console.log('‚ùå Problema de permiss√µes de escrita');
        }
    }

    async showSolutions() {
        console.log('\nüîß SOLU√á√ïES DISPON√çVEIS:\n');
        
        console.log('1. üîÑ LIMPEZA E TENTATIVA AUTOM√ÅTICA');
        console.log('   ‚Ä¢ Limpa node_modules');
        console.log('   ‚Ä¢ Mata processos Electron');
        console.log('   ‚Ä¢ Reinstala com configura√ß√µes especiais\n');
        
        console.log('2. üõ°Ô∏è  CONFIGURA√á√ÉO DO ANTIV√çRUS');
        console.log('   ‚Ä¢ Adicionar pasta do projeto √† exclus√£o');
        console.log('   ‚Ä¢ Desativar temporariamente o Windows Defender\n');
        
        console.log('3. üë®‚Äçüíº EXECU√á√ÉO COMO ADMINISTRADOR');
        console.log('   ‚Ä¢ Fechar este terminal');
        console.log('   ‚Ä¢ Abrir novo terminal como administrador');
        console.log('   ‚Ä¢ Executar o setup novamente\n');
        
        console.log('4. üè≠ INSTALA√á√ÉO ALTERNATIVA');
        console.log('   ‚Ä¢ Usar Yarn ao inv√©s do NPM');
        console.log('   ‚Ä¢ Instalar Electron globalmente primeiro\n');
    }

    async attemptFix() {
        const choice = await this.askQuestion('Escolha uma op√ß√£o (1-4) ou 0 para sair: ');
        
        switch (choice) {
            case '1':
                await this.automaticFix();
                break;
            case '2':
                await this.antivirusInstructions();
                break;
            case '3':
                await this.adminInstructions();
                break;
            case '4':
                await this.alternativeInstall();
                break;
            case '0':
                console.log('üëã Saindo...');
                return;
            default:
                console.log('‚ùå Op√ß√£o inv√°lida');
                await this.attemptFix();
                return;
        }
    }

    async automaticFix() {
        console.log('\nüîÑ INICIANDO CORRE√á√ÉO AUTOM√ÅTICA...\n');
        
        try {
            console.log('1. Finalizando processos Electron...');
            try {
                await this.runCommand('taskkill /F /IM electron.exe');
                console.log('‚úÖ Processos Electron finalizados');
            } catch (error) {
                console.log('‚ÑπÔ∏è  Nenhum processo Electron encontrado');
            }

            console.log('\n2. Removendo node_modules...');
            const nodeModulesPath = path.join(this.projectPath, 'node_modules');
            if (fs.existsSync(nodeModulesPath)) {
                console.log('‚è≥ Isso pode demorar alguns minutos...');
                fs.rmSync(nodeModulesPath, { recursive: true, force: true });
                console.log('‚úÖ node_modules removido');
            } else {
                console.log('‚ÑπÔ∏è  node_modules n√£o encontrado');
            }

            console.log('\n3. Limpando cache do npm...');
            await this.runCommand('npm cache clean --force');
            console.log('‚úÖ Cache limpo');

            console.log('\n4. Reinstalando com configura√ß√µes especiais...');
            console.log('‚è≥ Isso pode demorar v√°rios minutos...\n');
            
            const npmCommands = [
                'npm config set cache .npm-cache',
                'npm config set prefer-offline false',
                'npm config set audit false',
                'npm install --no-optional --no-package-lock --force'
            ];

            for (const command of npmCommands) {
                console.log(`Executando: ${command}`);
                await this.runCommand(command);
            }

            console.log('\n‚úÖ CORRE√á√ÉO AUTOM√ÅTICA CONCLU√çDA!');
            console.log('Tente executar o setup novamente.');
            
        } catch (error) {
            console.log('\n‚ùå Corre√ß√£o autom√°tica falhou:', error.message);
            console.log('\nüí° Tente as outras op√ß√µes:');
            console.log('‚Ä¢ Op√ß√£o 2: Configurar antiv√≠rus');
            console.log('‚Ä¢ Op√ß√£o 3: Executar como administrador');
            await this.attemptFix();
        }
    }

    async antivirusInstructions() {
        console.log('\nüõ°Ô∏è  CONFIGURA√á√ÉO DO ANTIV√çRUS\n');
        
        console.log('WINDOWS DEFENDER:');
        console.log('1. Abra as "Configura√ß√µes do Windows"');
        console.log('2. V√° em "Atualiza√ß√£o e Seguran√ßa" ‚Üí "Seguran√ßa do Windows"');
        console.log('3. Clique em "Prote√ß√£o contra v√≠rus e amea√ßas"');
        console.log('4. Em "Configura√ß√µes de prote√ß√£o contra v√≠rus e amea√ßas", clique em "Gerenciar configura√ß√µes"');
        console.log('5. Em "Exclus√µes", clique em "Adicionar ou remover exclus√µes"');
        console.log('6. Clique em "Adicionar uma exclus√£o" ‚Üí "Pasta"');
        console.log(`7. Adicione esta pasta: ${this.projectPath}`);
        console.log('8. Adicione tamb√©m: C:\\Users\\[SEU_USUARIO]\\AppData\\Roaming\\npm-cache\n');
        
        console.log('OUTROS ANTIV√çRUS (Avast, AVG, Norton, etc.):');
        console.log('1. Abra seu antiv√≠rus');
        console.log('2. Procure por "Exclus√µes" ou "Exce√ß√µes"');
        console.log(`3. Adicione esta pasta: ${this.projectPath}`);
        console.log('4. Adicione tamb√©m a pasta de cache do npm\n');
        
        console.log('ALTERNATIVA TEMPOR√ÅRIA:');
        console.log('1. Desative temporariamente a prote√ß√£o em tempo real');
        console.log('2. Execute o setup');
        console.log('3. Reative a prote√ß√£o');
        console.log('4. Adicione as exclus√µes para uso futuro\n');
        
        const tryAgain = await this.askQuestion('Ap√≥s configurar o antiv√≠rus, deseja tentar novamente? (s/N): ');
        if (tryAgain.toLowerCase().startsWith('s')) {
            await this.automaticFix();
        }
    }

    async adminInstructions() {
        console.log('\nüë®‚Äçüíº EXECU√á√ÉO COMO ADMINISTRADOR\n');
        
        console.log('PASSOS:');
        console.log('1. Feche este terminal/prompt');
        console.log('2. Clique com bot√£o direito no "Prompt de Comando" ou "PowerShell"');
        console.log('3. Selecione "Executar como administrador"');
        console.log('4. Navegue at√© esta pasta:');
        console.log(`   cd "${this.projectPath}"`);
        console.log('5. Execute um dos comandos:');
        console.log('   node complete-setup.js');
        console.log('   ou');
        console.log('   npm run setup\n');
        
        console.log('ALTERNATIVA (arquivo .bat):');
        
        const batContent = `@echo off
title GMV Sistema - Setup como Administrador
echo Executando setup como administrador...
echo.
cd /d "${this.projectPath}"
node complete-setup.js
echo.
echo Pressione qualquer tecla para fechar...
pause > nul`;

        const batPath = path.join(this.projectPath, 'SETUP-ADMIN.bat');
        fs.writeFileSync(batPath, batContent);
        
        console.log(`‚úÖ Criado arquivo: ${batPath}`);
        console.log('‚Ä¢ Clique com bot√£o direito neste arquivo');
        console.log('‚Ä¢ Selecione "Executar como administrador"\n');
    }

    async alternativeInstall() {
        console.log('\nüè≠ INSTALA√á√ÉO ALTERNATIVA\n');
        
        const method = await this.askQuestion('Escolha o m√©todo (1-Yarn, 2-Electron Global, 3-Manual): ');
        
        switch (method) {
            case '1':
                await this.installWithYarn();
                break;
            case '2':
                await this.installElectronGlobal();
                break;
            case '3':
                await this.manualInstall();
                break;
            default:
                console.log('‚ùå Op√ß√£o inv√°lida');
                await this.alternativeInstall();
        }
    }

    async installWithYarn() {
        console.log('\nüì¶ INSTALA√á√ÉO COM YARN\n');
        
        try {
            await this.runCommand('yarn --version');
            console.log('‚úÖ Yarn encontrado');
        } catch (error) {
            console.log('‚ö†Ô∏è  Yarn n√£o encontrado. Instalando...');
            await this.runCommand('npm install -g yarn');
        }
        
        console.log('\nüîÑ Instalando depend√™ncias com Yarn...');
        await this.runCommand('yarn install');
        console.log('‚úÖ Depend√™ncias instaladas com Yarn!');
    }

    async installElectronGlobal() {
        console.log('\nüåê INSTALA√á√ÉO GLOBAL DO ELECTRON\n');
        
        try {
            console.log('1. Instalando Electron globalmente...');
            await this.runCommand('npm install -g electron');
            
            console.log('\n2. Instalando outras depend√™ncias...');
            await this.runCommand('npm install --ignore-scripts');
            
            console.log('\n3. Configurando Electron local...');
            await this.runCommand('npm rebuild electron --update-binary');
            
            console.log('‚úÖ Instala√ß√£o com Electron global conclu√≠da!');
        } catch (error) {
            console.log('‚ùå Falha na instala√ß√£o global:', error.message);
        }
    }

    async manualInstall() {
        console.log('\nüîß INSTALA√á√ÉO MANUAL\n');
        
        console.log('PASSOS MANUAIS:');
        console.log('1. Baixe o Electron manualmente:');
        console.log('   https://github.com/electron/electron/releases');
        console.log('2. Extraia para: node_modules/electron/dist/');
        console.log('3. Execute: npm install --ignore-scripts');
        console.log('4. Execute: npm run build-frontend');
        console.log('5. Execute: npm run build\n');
        
        console.log('OU USE O PORTABLE:');
        console.log('1. Baixe a vers√£o portable do Electron');
        console.log('2. Configure manualmente os caminhos');
        console.log('3. Execute o build diretamente\n');
    }

    async runCommand(command) {
        return new Promise((resolve, reject) => {
            exec(command, { shell: true }, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                } else {
                    resolve(stdout);
                }
            });
        });
    }

    async askQuestion(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer);
            });
        });
    }
}

if (require.main === module) {
    const fixer = new PermissionFixer();
    fixer.run().catch(console.error);
}

module.exports = PermissionFixer;